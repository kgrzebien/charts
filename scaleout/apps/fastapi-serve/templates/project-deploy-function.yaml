apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appname }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.appname }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8501"
      labels:
        app: {{ .Values.appname }}
        project: {{ .Values.project.slug }}
        type: deployment
    spec:
      volumes:
      - name: rp-conf
        configMap:
          name: {{ .Release.Name }}-rp-config
      {{ if .Values.model_card.enabled }}
      - name: mc-conf
        configMap:
          name: {{ .Release.Name }}-mc-config
      {{ end }}
      - name: gatekeeper-config
        configMap:
          name: {{ .Release.Name }}-gatekeeper-config
      - name: model-vol
        emptyDir: {}

      {{- with .Values.extraVolumes }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      containers:
      - name: gatekeeper
        image: {{ .Values.gatekeeper.image }}
        imagePullPolicy: Always
        args:
          - --config=/etc/secrets/gatekeeper.yaml
        ports:
          - containerPort: {{ .Values.gatekeeper.port }}
        volumeMounts:
        - name: gatekeeper-config
          mountPath: /etc/secrets/
      - name: reverse-proxy
        image: nginx:alpine
        imagePullPolicy: Always
        volumeMounts:
        - name: rp-conf
          mountPath: /etc/nginx

      {{ if .Values.model_card.enabled }}
      - name: model-card
        image: nginx:alpine
        imagePullPolicy: Always
        volumeMounts:
        - name: model-vol
          mountPath: /model
        - name: mc-conf
          mountPath: /etc/nginx
      {{ end }}
      - name: serve
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu }}m
            memory: {{ .Values.resources.limits.memory }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpu }}m
            memory: {{ .Values.resources.requests.memory }}Mi
        volumeMounts:
        - name: model-vol
          mountPath: /model
        {{- with .Values.extraVolumeMounts }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
        env:
          - name: S3_ACCESS_KEY_ID
            value: {{ .Values.models.access_key }}
          - name: S3_SECRET_ACCESS_KEY
            value: {{ .Values.models.secret_key }}
          - name: AWS_REGION
            value: us-east-1
          - name: S3_ENDPOINT
            value: http://{{ .Values.project.slug }}-minio:9000
          - name: STACKN_MODEL_BUCKET
            value: {{ .Values.models.bucket }}
          - name: STACKN_MODEL_FILE
            value: {{ .Values.models.obj }}
          {{- with .Values.extraEnv }}
          {{- tpl . $ | nindent 10 }}
          {{- end }}
        command: ["/bin/bash"]
        args: ["-c", "./mc config host add projminio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY;./mc cp projminio/$STACKN_MODEL_BUCKET/$STACKN_MODEL_FILE model/model.tar.gz;cd model;tar xvf model.tar.gz;[[ -f requirements.txt ]] && pip3 install -r requirements.txt;cd ..;./deploy.sh"]
        image: {{ .Values.deployment.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.deployment.port }}